pipeline {
    agent any

    environment {
        APP_NAME = "todo-app-prod"
        APP_PORT = "3000"
        VM_IP = "172.184.141.110"  // ‚Üê √Ä remplacer
    }

    stages {
        // √âTAPE 1: Pr√©paration (LinkedIn: montre l'initialisation)
        stage('üõ†Ô∏è Setup Infrastructure') {
            steps {
                echo "1. Cr√©ation du volume MySQL persistant"
                sh '''
                    docker volume create mysql_data || true
                    docker network create todo_network || true
                '''
            }
        }

        // √âTAPE 2: Validation (LinkedIn: d√©montre les bonnes pratiques)
        stage('üîç Validate Code') {
            steps {
                echo "2. Validation du code et des d√©pendances"
                git branch: 'main', 
                url: 'https://github.com/stanilpaul/docker-getting-started-devops-enhanced.git'
                sh 'docker-compose config'
                sh 'docker-compose build --no-cache --force-rm'
            }
        }

        // √âTAPE 3: Tests (LinkedIn: montre l'aspect CI)
        stage('üß™ Run Tests') {
            steps {
                echo "3. Ex√©cution des tests automatis√©s"
                sh '''
                    docker-compose up -d
                    sleep 10  # Attente d√©marrage MySQL
                    docker-compose exec app yarn test || true
                    docker-compose down  # Nettoyage test SANS -v
                '''
            }
        }

        // √âTAPE 4: D√©ploiement (LinkedIn: d√©montre le CD)
        stage('üöÄ Deploy Production') {
            steps {
                echo "4. D√©ploiement en production"
                sh '''
                    # Arr√™t propre de l'app SEULEMENT
                    docker-compose stop app || true
                    docker-compose rm -f app || true
                    
                    # Reconstruction et d√©marrage
                    docker-compose build --no-cache app
                    docker-compose up -d
                    
                    # Politique de red√©marrage
                    docker update --restart=always $(docker ps -q -f name=${APP_NAME})
                '''
            }
        }

        // √âTAPE 5: V√©rification (LinkedIn: montre le monitoring)
        stage('‚úÖ Verify Deployment') {
            steps {
                echo "5. Contr√¥le qualit√© post-d√©ploiement"
                sh '''
                    curl -If http://localhost:${APP_PORT}
                    docker-compose logs --tail=20 app
                '''
                echo "üåê Application LIVE: http://${VM_IP}:${APP_PORT}"
            }
        }
    }

    post {
        success {
            slackSend channel: '#deployments', 
                      message: "SUCCESS: TodoApp d√©ploy√©e (${env.BUILD_URL})"
        }
    }
}
